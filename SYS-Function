SYS
c1p
2016年7月7日

SYS函数中x为10进制数据，n为要转换的进制(二至九进制均可），如：10000转换为8进制

输入SYS(10000,8)


SYS<-function(x,n){
    if(n>10){
        print("error")  ##不知道大于10进制该如何计算，故在此做出去判断，不计算10进制以上数值
    }else{
        z<-1000  ##z这个数值本应有更高级的办法推算出来，但本人数学较差，不知道如何测算——
                 ##——多少个数可以除余数值，故在此设测算次数为1000，后面将小于等于零的数值删去
        a<-floor(x/n)  ##a为数值对应的整除数
        for(i in 1:z){
            a[i+1]<-floor(a[i]/n)
        }           ##for loop函数 在a中加入每一个整除数
        a1<-a[a>0]  ##因为前面要求计算1000次，整除中有效数据一定大于零，故在此删去小于零的数据
        b<-x%%n     ##b的初始值设为第一个数据的除余（原理参照进制转换方式）
        z1<-length(a1)-1  ##z1是除余计算次数，这次可以通过计算a1的长度并减去1得出。
        for(i in 1:z1){
             b[i+1]<-a1[i]%%n
        }           ##求出每个对应位置的余数
        b[length(b)+1]<-a1[length(a1)]
         ##向量c的第一位设置为1，下面计算中需要将10的c次方
        c<-1 
        for(i in 1:(length(b)-1)){
            c[i+1]<-10^i
        }  
    }
    print(sum(c*b)) ##两个向量相称并相加，就可以得出一个对应数值
    print(a1)
    print(b)
    print(c)
}


为了方便理解输出是 我将每一步中的“整除”、“除余”及“将各除余数的位置”输出
数据中输出的第一个值，即是转化结果：

八进制
SYS(1000,8)
## [1] 1750
## [1] 125  15   1
## [1] 0 5 7 1
## [1]    1   10  100 1000

七进制
SYS(1000,7)
## [1] 2626
## [1] 142  20   2
## [1] 6 2 6 2
## [1]    1   10  100 1000

二进制
SYS(1000,2)
## [1] 1111101000
## [1] 500 250 125  62  31  15   7   3   1
##  [1] 0 0 0 1 0 1 1 1 1 1
##  [1] 1e+00 1e+01 1e+02 1e+03 1e+04 1e+05 1e+06 1e+07 1e+08 1e+09
